import {
    filters,
    MessageContext,
    WizardScene,
    WizardSceneAction,
} from '@mtcute/dispatcher';
import { lolzMarketService } from 'api/lzt/lzt-market-service.js';
import { ItemData } from 'api/lzt/model.js';
import { authKeyAuth } from 'onboarding.js';
import { storage } from 'index.js';
import { BotKeyboard } from '@mtcute/node';
import { referralMenu } from 'telegram-panel/telegram-panel.js';

interface BuyAccountsForm {
    count: number;
    maxPrice: number;
}

export const BuyAccountsWizard = new WizardScene<BuyAccountsForm>(
    'buy_accounts_form'
);

BuyAccountsWizard.addStep(async (msg, state) => {
    const count = +msg.text.trim();

    if (isNaN(count) || count < 1) {
        await msg.replyText('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', {
            replyMarkup: BotKeyboard.inline([
                [BotKeyboard.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
            ]),
        });
        return WizardSceneAction.Stay;
    }
    await state.set({ count, maxPrice: 0 });

    await msg.answerText(
        'üíé –í—ã–±—Ä–∞–Ω–æ ' +
            count +
            ' –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ç–æ–ª–æ–∫ —Ü–µ–Ω—ã –Ω–∞ –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç.'
    );

    return WizardSceneAction.Next;
});

BuyAccountsWizard.onCallbackQuery(
    filters.equals('cancel'),
    async (upd, state) => {
        await upd.editMessage({
            text: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
            replyMarkup: referralMenu,
        });
        await state.exit();
    }
);

BuyAccountsWizard.addStep(async (msg, state) => {
    const count = (await state.get())!.count;
    const price = +msg.text.trim();

    if (isNaN(price) || price < 0) {
        await msg.replyText('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', {
            replyMarkup: BotKeyboard.inline([
                [BotKeyboard.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
            ]),
        });

        return WizardSceneAction.Stay;
    }

    await state.set({ count, maxPrice: price });

    await msg.answerText(
        `üîç –ò—â—É ${count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ –Ω–µ –≤—ã—à–µ ${price} —Ä—É–±–ª–µ–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...`
    );

    let {
        data: { items },
    } = await lolzMarketService.getTelegramAccounts(price);

    if (items.length === 0) {
        await msg.replyText('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º');
        return WizardSceneAction.Exit;
    }

    let itemsToBuy = items.slice(0, count);

    const summaryMsg = await msg.replyText(
        `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${items.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ - ${
            items.reduce((acc, item) => acc + item.price, 0) / items.length
        } —Ä—É–±–ª–µ–π.`
    );

    await msg.client.editMessage({
        message: summaryMsg,
        text:
            summaryMsg.text +
            `\n–ê–∫–∫–∞—É–Ω—Ç—ã:\n${itemsToBuy.map((item, idx) => `[${idx}] - ${item.title}[${item.item_id}] = ${item.price} RUB`).join('\n')}`,
    });

    await buyAccounts(itemsToBuy, msg);

    return WizardSceneAction.Exit;
});

async function buyAccounts(itemsToBuy: ItemData[], msg: MessageContext) {
    await msg.answerText(
        'üõí –ù–∞—á–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –≠—Ç–æ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è...'
    );

    for (let itemIdx = 0; itemIdx < itemsToBuy.length; itemIdx++) {
        const itemToBuy = itemsToBuy[itemIdx];
        try {
            const response = await lolzMarketService.fastBuy(itemToBuy.item_id);
            if (response.status === 200) {
                const {
                    data: { item },
                } = response;

                await authKeyAuth(
                    item.item_id.toString(),
                    item.loginData.raw,
                    item.loginData.password,
                    false,
                    null
                );

                storage.update((data) => {
                    data.referralAccounts.push(item.item_id.toString());
                });

                await msg.answerText(
                    `‚úÖ [${itemIdx + 1}/${itemsToBuy.length}] –ê–∫–∫–∞—É–Ω—Ç ${item.item_id} - ${item.title} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω`
                );
            } else {
                await msg.answerText(
                    `‚ùå [${itemIdx + 1}/${itemsToBuy.length}] –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${itemToBuy.item_id}`
                );
            }
        } catch (_e) {
            let e: Error = _e as Error;

            await msg.answerText(
                `‚ùå [${itemIdx + 1}/${itemsToBuy.length}] –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${itemToBuy.item_id}\n${e}`
            );
        }
    }

    await msg.answerText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', {
        replyMarkup: referralMenu,
    });
}
